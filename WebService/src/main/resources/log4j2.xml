<?xml version="1.0" encoding="UTF-8"?>
<!-- status=debug 可以查看log4j的装配过程 -->
<configuration status="off" monitorInterval="1800">
    <properties>
        <property name="LOG_HOME">D:/log</property>
        <!-- 日志目录 -->
        <property name="DEV_LOG">${LOG_HOME}/dev_log</property>
        <property name="SYSTEM_LOG">${LOG_HOME}/system_log</property>
        <property name="ERR_LOG">${LOG_HOME}/err_log</property>
    </properties>
    <appenders>
        <!-- 定义控制台输出 -->
        <Console name="Console" target="SYSTEM_OUT" follow="true">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--这个都知道是输出日志的格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </Console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="${LOG_HOME}/test.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>
        <!-- 程序员调试日志 所有级别的日志全部记录-->
        <RollingRandomAccessFile name="DevLog"
                                 fileName="${DEV_LOG}/dev.log"
                                 filePattern="${DEV_LOG}/dev.%d{yyyy-MM-dd-HH}.log.gz"
                                 >
            <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n" />
            <Policies>
                <!-- 日志一小时为单位进行存储 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>
        <!-- 系统运行日志 只记录info级别以上的日志，其余日志不做记录-->
        <RollingRandomAccessFile name="SystemLog"
                                 fileName="${SYSTEM_LOG}/system.log"
                                 filePattern="${SYSTEM_LOG}/%d{yyyy-MM-dd}/system.%d{yyyy-MM-dd-HH}.log.gz">
            <!-- 系统日志只输出info及以上级别的日志，便于错误查找 -->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout
                    pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n" />
            <Policies>
                <!-- 日志一小时为单位进行存储 -->
                <TimeBasedTriggeringPolicy interval="1"
                                           modulate="true" />
            </Policies>
        </RollingRandomAccessFile>
        <!-- 错误分析日志 只记录error级别以上的日志，其余日志不做记录-->
        <RollingRandomAccessFile name="ErrorLog"
                                 fileName="${LOG_HOME}/err_log/err.log"
                                 filePattern="${LOG_HOME}/err_log/%d{yyyy-MM-dd}/err.%d{yyyy-MM-dd-HH}.log.gz">
            <!-- 错误日志只输出error及以上级别的日志，便于错误查找 -->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout
                    pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n" />
            <Policies>
                <!-- 日志一小时为单位进行存储 -->
                <TimeBasedTriggeringPolicy interval="1"
                                           modulate="true" />
            </Policies>
        </RollingRandomAccessFile>
    </appenders>
    <loggers>
        <!-- Root Logger -->
        <root level="error">
            <appender-ref ref="ErrorLog" />
            <appender-ref ref="Console" />
        </root>
        <!-- com.ps.heat.dao -->
        <logger name="com.ps.heat.dao" level="error"
                additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="ErrorLog" />
        </logger>
        <!-- com.ps.heat.service-->
        <logger name="com.ps.heat.service" level="info"
                additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="SystemLog"/>
            <appender-ref ref="ErrorLog"/>
        </logger>
    </loggers>
</configuration>

